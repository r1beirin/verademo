trigger:
- main
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    steps: 
    - task: Maven@3
      displayName: 'Buildando com o Maven'
      inputs:
        mavenPomFile: 'app/pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: PublishPipelineArtifact@1
      displayName: 'Publicando o .war'
      inputs:
        targetPath: 'app/target/verademo.war'
        artifact: 'drop'
        publishLocation: 'pipeline'

# - stage: SCA
#   displayName: 'SCA'
#   jobs:
#   - job: SCA
#     displayName: 'SCA'
#     steps:
#       - script: curl -sSL  https://download.sourceclear.com/ci.sh | sh -s -- scan $(System.ArtifactsDirectory)/verademo.war
#     #- script: curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan $(Build.SourcesDirectory) --update-advisor --debug
#       # env:
#       #   SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
#       #   SRCCLR_SCM_REF_TYPE='branch'
#       #   export SRCCLR_SCM_REF=$(Build.SourceBranchName)
#     # - task: CmdLine@2
#     #   inputs:
#     #   # podemos fazer um step antes para testar o ambiente do agente instalado usando sh -s -- test
#     #     script: | 
#     #       export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
#     #       export SRCCLR_SCM_URI=$(Build.Repository.Uri)
#     #       export SRCCLR_SCM_REF=$(Build.SourceBranchName)
#     #       export SRCCLR_SCM_REF_TYPE='branch'
#     #       export SRCCLR_SCM_REV=$(Build.SourceVersion) 
#     #       curl -sSL https://download.sourceclear.com/ci.sh | bash -s -- scan --update-advisor


- stage: SAST
  displayName: 'SAST'
  jobs:
  - job: UploadAndScan
    displayName: 'Upload and Scan'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Baixando o .war'
      inputs:
        buildType: 'current'
        artifactName: 'drop'
        targetPath: '$(System.ArtifactsDirectory)'
    - task: Bash@3
      displayName: 'SCA'
      inputs:
        targetType: 'inline'
        script: 'curl -sSL  https://download.sourceclear.com/ci.sh | sh -s -- scan $(System.ArtifactsDirectory)/verademo.war'
    - task: Veracode@3
      displayName: 'Veracode upload and scan'
      inputs:
        ConnectionDetailsSelection: 'Credentials'
        apiId: '$(VERACODE_API_ID)'
        apiKey: '$(VERACODE_API_KEY)'
        veracodeAppProfile: 'Teste Mateus Azure DevOps'
        version: '$(build.buildNumber)'
        filepath: '$(System.ArtifactsDirectory)/verademo.war'
        sandboxName: '$(build.buildNumber)'
        createSandBox: true
        failBuildIfUploadAndScanBuildStepFails: true
        importResults: true
        maximumWaitTime: '360'


# # - task: Bash@3
# #   displayName: Veracode Pipeline Scan
# #   inputs:
# #     targetType: "inline"
# #     script: |
# #       curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
# #       unzip -o pipeline-scan-LATEST.zip
# #       java -jar pipeline-scan.jar -vid $(VERACODE_API_ID) -vkey $(VERACODE_API_KEY) -f /home/vsts/work/1/s/app/target/verademo.war
# #     # "|| true" specifies to continue build if Pipeline Scan discovers flaws.
# #     # To fail the build for new flaws not listed in a baseline file, add an existing baseline file with "-bf <baseline filename>" and remove "|| true".
# # - publish: $(System.DefaultWorkingDirectory)/results.json # Save the scan results as a file named results.json.
# #   artifact: VeracodeBaseline